00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 29/01/2025 19:37:13

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Endless Runner Starter Kit
00000000                             3  * Written by : Philip Bourke
00000000                             4  * Date       : 25/02/2023
00000000                             5  * Description: Endless Runner Project Starter Kit
00000000                             6  *-----------------------------------------------------------
00001000                             7      ORG    $1000
00001000                             8  START:                  ; first instruction of program
00001000                             9  
00001000                            10  *-----------------------------------------------------------
00001000                            11  * Section       : Trap Codes
00001000                            12  * Description   : Trap Codes used throughout StarterKit
00001000                            13  *-----------------------------------------------------------
00001000                            14  * Trap CODES
00001000  =00000021                 15  TC_SCREEN   EQU         33          ; Screen size information trap code
00001000  =00000000                 16  TC_S_SIZE   EQU         00          ; Places 0 in D1.L to retrieve Screen width and height in D1.L
00001000                            17                                      ; First 16 bit Word is screen Width and Second 16 bits is screen Height
00001000  =00000013                 18  TC_KEYCODE  EQU         19          ; Check for pressed keys
00001000  =0000005C                 19  TC_DBL_BUF  EQU         92          ; Double Buffer Screen Trap Code
00001000  =0000000B                 20  TC_CURSR_P  EQU         11          ; Trap code cursor position
00001000                            21  
00001000  =00000009                 22  TC_EXIT     EQU         09          ; Exit Trapcode
00001000                            23  
00001000                            24  *-----------------------------------------------------------
00001000                            25  * Section       : Charater Setup
00001000                            26  * Description   : Size of Player and Enemy and properties
00001000                            27  * of these characters e.g Starting Positions and Sizes
00001000                            28  *-----------------------------------------------------------
00001000  =00000008                 29  PLYR_W_INIT EQU         08          ; Players initial Width
00001000  =00000008                 30  PLYR_H_INIT EQU         08          ; Players initial Height
00001000                            31  
00001000  =00000000                 32  PLYR_DFLT_V EQU         00          ; Default Player Velocity
00001000  =FFFFFFEC                 33  PLYR_JUMP_V EQU        -20          ; Player Jump Velocity
00001000  =00000001                 34  PLYR_DFLT_G EQU         01          ; Player Default Gravity
00001000                            35  
00001000  =00000001                 36  GND_TRUE    EQU         01          ; Player on Ground True
00001000  =00000000                 37  GND_FALSE   EQU         00          ; Player on Ground False
00001000                            38  
00001000  =00000000                 39  RUN_INDEX   EQU         00          ; Player Run Sound Index  
00001000  =00000001                 40  JMP_INDEX   EQU         01          ; Player Jump Sound Index  
00001000  =00000002                 41  OPPS_INDEX  EQU         02          ; Player Opps Sound Index
00001000                            42  
00001000  =00000008                 43  ENMY_W_INIT EQU         08          ; Enemy initial Width
00001000  =00000008                 44  ENMY_H_INIT EQU         08          ; Enemy initial Height
00001000                            45  
00001000                            46  *-----------------------------------------------------------
00001000                            47  * Section       : Game Stats
00001000                            48  * Description   : Points
00001000                            49  *-----------------------------------------------------------
00001000  =00000001                 50  POINTS      EQU         01          ; Points added
00001000                            51  
00001000                            52  *-----------------------------------------------------------
00001000                            53  * Section       : Keyboard Keys
00001000                            54  * Description   : Spacebar and Escape or two functioning keys
00001000                            55  * Spacebar to JUMP and Escape to Exit Game
00001000                            56  *-----------------------------------------------------------
00001000  =00000020                 57  SPACEBAR    EQU         $20         ; Spacebar ASCII Keycode
00001000  =0000001B                 58  ESCAPE      EQU         $1B         ; Escape ASCII Keycode
00001000                            59  
00001000                            60  *-----------------------------------------------------------
00001000                            61  * Subroutine    : Initialise
00001000                            62  * Description   : Initialise game data into memory such as 
00001000                            63  * sounds and screen size
00001000                            64  *-----------------------------------------------------------
00001000                            65  INITIALISE:
00001000                            66      ; Initialise Sounds
00001000  6100 036C                 67      BSR     RUN_LOAD                ; Load Run Sound into Memory
00001004  6100 0386                 68      BSR     JUMP_LOAD               ; Load Jump Sound into Memory
00001008  6100 03A0                 69      BSR     OPPS_LOAD               ; Load Opps (Collision) Sound into Memory
0000100C                            70  
0000100C                            71      ; Screen Size
0000100C  103C 0021                 72      MOVE.B  #TC_SCREEN, D0          ; access screen information
00001010  7200                      73      MOVE.L  #TC_S_SIZE, D1          ; placing 0 in D1 triggers loading screen size information
00001012  4E4F                      74      TRAP    #15                     ; interpret D0 and D1 for screen size
00001014  33C1 00001522             75      MOVE.W  D1,         SCREEN_H    ; place screen height in memory location
0000101A  4841                      76      SWAP    D1                      ; Swap top and bottom word to retrive screen size
0000101C  33C1 00001520             77      MOVE.W  D1,         SCREEN_W    ; place screen width in memory location
00001022                            78  
00001022                            79      ; Place the Player at the center of the screen
00001022  4281                      80      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001024  3239 00001520             81      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
0000102A  82FC 0002                 82      DIVU    #02,        D1          ; divide by 2 for center on X Axis
0000102E  23C1 00001528             83      MOVE.L  D1,         PLAYER_X    ; Players X Position
00001034                            84  
00001034  4281                      85      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001036  3239 00001522             86      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
0000103C  82FC 0002                 87      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
00001040  23C1 0000152C             88      MOVE.L  D1,         PLAYER_Y    ; Players Y Position
00001046                            89  
00001046                            90      ; Initialise Player Score
00001046  4281                      91      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001048  7200                      92      MOVE.L  #00,        D1          ; Init Score
0000104A  23C1 00001530             93      MOVE.L  D1,         PLAYER_SCORE
00001050                            94  
00001050                            95      ; Initialise Player Velocity
00001050  4281                      96      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001052  123C 0000                 97      MOVE.B  #PLYR_DFLT_V,D1         ; Init Player Velocity
00001056  23C1 00001534             98      MOVE.L  D1,         PLYR_VELOCITY
0000105C                            99  
0000105C                           100      ; Initialise Player Gravity
0000105C  4281                     101      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000105E  7201                     102      MOVE.L  #PLYR_DFLT_G,D1         ; Init Player Gravity
00001060  23C1 00001538            103      MOVE.L  D1,         PLYR_GRAVITY
00001066                           104  
00001066                           105      ; Initialize Player on Ground
00001066  23FC 00000001 0000153C   106      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Init Player on Ground
00001070                           107  
00001070                           108      ; Initial Position for Enemy
00001070  4281                     109      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001072  3239 00001520            110      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001078  23C1 00001540            111      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
0000107E                           112  
0000107E  4281                     113      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001080  3239 00001522            114      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001086  82FC 0002                115      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
0000108A  23C1 00001544            116      MOVE.L  D1,         ENEMY_Y     ; Enemy Y Position
00001090                           117  
00001090                           118      ; Enable the screen back buffer(see easy 68k help)
00001090  103C 005C                119      MOVE.B  #TC_DBL_BUF,D0          ; 92 Enables Double Buffer
00001094  123C 0011                120      MOVE.B  #17,        D1          ; Combine Tasks
00001098  4E4F                     121      TRAP    #15                     ; Trap (Perform action)
0000109A                           122  
0000109A                           123      ; Clear the screen (see easy 68k help)
0000109A  103C 000B                124      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000109E  323C FF00                125      MOVE.W  #$FF00,     D1          ; Fill Screen Clear
000010A2  4E4F                     126      TRAP    #15                     ; Trap (Perform action)
000010A4                           127  
000010A4                           128  *-----------------------------------------------------------
000010A4                           129  * Subroutine    : Game
000010A4                           130  * Description   : Game including main GameLoop. GameLoop is like
000010A4                           131  * a while loop in that it runs forever until interupted
000010A4                           132  * (Input, Update, Draw). The Enemies Run at Player Jump to Avoid
000010A4                           133  *-----------------------------------------------------------
000010A4                           134  GAME:
000010A4  6100 02DA                135      BSR     PLAY_RUN                ; Play Run Wav
000010A8                           136  GAMELOOP:
000010A8                           137      ; Main Gameloop
000010A8  6100 0014                138      BSR     INPUT                   ; Check Keyboard Input
000010AC  6100 0056                139      BSR     UPDATE                  ; Update positions and points
000010B0  6100 023E                140      BSR     IS_PLAYER_ON_GND        ; Check if player is on ground
000010B4  6100 0372                141      BSR     CHECK_COLLISIONS        ; Check for Collisions
000010B8  6100 009E                142      BSR     DRAW                    ; Draw the Scene
000010BC  60EA                     143      BRA     GAMELOOP                ; Loop back to GameLoop
000010BE                           144  
000010BE                           145  *-----------------------------------------------------------
000010BE                           146  * Subroutine    : Input
000010BE                           147  * Description   : Process Keyboard Input
000010BE                           148  *-----------------------------------------------------------
000010BE                           149  INPUT:
000010BE                           150      ; Process Input
000010BE  4281                     151      CLR.L   D1                      ; Clear Data Register
000010C0  103C 0013                152      MOVE.B  #TC_KEYCODE,D0          ; Listen for Keys
000010C4  4E4F                     153      TRAP    #15                     ; Trap (Perform action)
000010C6  1401                     154      MOVE.B  D1,         D2          ; Move last key D1 to D2
000010C8  B43C 0000                155      CMP.B   #00,        D2          ; Key is pressed
000010CC  6700 000E                156      BEQ     PROCESS_INPUT           ; Process Key
000010D0  4E4F                     157      TRAP    #15                     ; Trap for Last Key
000010D2                           158      ; Check if key still pressed
000010D2  B23C 00FF                159      CMP.B   #$FF,       D1          ; Is it still pressed
000010D6  6700 0004                160      BEQ     PROCESS_INPUT           ; Process Last Key
000010DA  4E75                     161      RTS                             ; Return to subroutine
000010DC                           162  
000010DC                           163  *-----------------------------------------------------------
000010DC                           164  * Subroutine    : Process Input
000010DC                           165  * Description   : Branch based on keys pressed
000010DC                           166  *-----------------------------------------------------------
000010DC                           167  PROCESS_INPUT:
000010DC  23C2 00001524            168      MOVE.L  D2,         CURRENT_KEY ; Put Current Key in Memory
000010E2  0CB9 0000001B 00001524   169      CMP.L   #ESCAPE,    CURRENT_KEY ; Is Current Key Escape
000010EC  6700 03BA                170      BEQ     EXIT                    ; Exit if Escape
000010F0  0CB9 00000020 00001524   171      CMP.L   #SPACEBAR,  CURRENT_KEY ; Is Current Key Spacebar
000010FA  6700 0248                172      BEQ     JUMP                    ; Jump
000010FE  6000 0268                173      BRA     IDLE                    ; Or Idle
00001102  4E75                     174      RTS                             ; Return to subroutine
00001104                           175  
00001104                           176  *-----------------------------------------------------------
00001104                           177  * Subroutine    : Update
00001104                           178  * Description   : Main update loop update Player and Enemies
00001104                           179  *-----------------------------------------------------------
00001104                           180  UPDATE:
00001104                           181      ; Update the Players Positon based on Velocity and Gravity
00001104  4281                     182      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001106  2239 00001534            183      MOVE.L  PLYR_VELOCITY, D1       ; Fetch Player Velocity
0000110C  2439 00001538            184      MOVE.L  PLYR_GRAVITY, D2        ; Fetch Player Gravity
00001112  D282                     185      ADD.L   D2,         D1          ; Add Gravity to Velocity
00001114  23C1 00001534            186      MOVE.L  D1,         PLYR_VELOCITY ; Update Player Velocity
0000111A  D2B9 0000152C            187      ADD.L   PLAYER_Y,   D1          ; Add Velocity to Player
00001120  23C1 0000152C            188      MOVE.L  D1,         PLAYER_Y    ; Update Players Y Position 
00001126                           189  
00001126                           190      ; Move the Enemy
00001126  4281                     191      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001128  4281                     192      CLR.L   D1                      ; Clear the contents of D0
0000112A  2239 00001540            193      MOVE.L  ENEMY_X,    D1          ; Move the Enemy X Position to D0
00001130  B2BC 00000000            194      CMP.L   #00,        D1
00001136  6F00 0010                195      BLE     RESET_ENEMY_POSITION    ; Reset Enemy if off Screen
0000113A  6000 0004                196      BRA     MOVE_ENEMY              ; Move the Enemy
0000113E                           197  
0000113E  4E75                     198      RTS                             ; Return to subroutine  
00001140                           199  
00001140                           200  *-----------------------------------------------------------
00001140                           201  * Subroutine    : Move Enemy
00001140                           202  * Description   : Move Enemy Right to Left
00001140                           203  *-----------------------------------------------------------
00001140                           204  MOVE_ENEMY:
00001140  53B9 00001540            205      SUB.L   #01,        ENEMY_X     ; Move enemy by X Value
00001146  4E75                     206      RTS
00001148                           207  
00001148                           208  *-----------------------------------------------------------
00001148                           209  * Subroutine    : Reset Enemy
00001148                           210  * Description   : Reset Enemy if to passes 0 to Right of Screen
00001148                           211  *-----------------------------------------------------------
00001148                           212  RESET_ENEMY_POSITION:
00001148  4281                     213      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
0000114A  3239 00001520            214      MOVE.W  SCREEN_W,   D1          ; Place Screen width in D1
00001150  23C1 00001540            215      MOVE.L  D1,         ENEMY_X     ; Enemy X Position
00001156  4E75                     216      RTS
00001158                           217  
00001158                           218  *-----------------------------------------------------------
00001158                           219  * Subroutine    : Draw
00001158                           220  * Description   : Draw Screen
00001158                           221  *-----------------------------------------------------------
00001158                           222  DRAW: 
00001158                           223      ; Enable back buffer
00001158  103C 005E                224      MOVE.B  #94,        D0
0000115C  4E4F                     225      TRAP    #15
0000115E                           226  
0000115E                           227      ; Clear the screen
0000115E  103C 000B                228      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001162  323C FF00                229      MOVE.W  #$FF00,     D1          ; Clear contents
00001166  4E4F                     230      TRAP    #15                     ; Trap (Perform action)
00001168                           231  
00001168  6100 000C                232      BSR     DRAW_PLYR_DATA          ; Draw Draw Score, HUD, Player X and Y
0000116C  6100 025A                233      BSR     DRAW_PLAYER             ; Draw Player
00001170  6100 0286                234      BSR     DRAW_ENEMY              ; Draw Enemy
00001174  4E75                     235      RTS                             ; Return to subroutine
00001176                           236  
00001176                           237  *-----------------------------------------------------------
00001176                           238  * Subroutine    : Draw Player Data
00001176                           239  * Description   : Draw Player X, Y, Velocity, Gravity and OnGround
00001176                           240  *-----------------------------------------------------------
00001176                           241  DRAW_PLYR_DATA:
00001176  4281                     242      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001178                           243  
00001178                           244      ; Player Score Message
00001178  103C 000B                245      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000117C  323C 0201                246      MOVE.W  #$0201,     D1          ; Col 02, Row 01
00001180  4E4F                     247      TRAP    #15                     ; Trap (Perform action)
00001182  43F9 000014C8            248      LEA     SCORE_MSG,  A1          ; Score Message
00001188  303C 000D                249      MOVE    #13,        D0          ; No Line feed
0000118C  4E4F                     250      TRAP    #15                     ; Trap (Perform action)
0000118E                           251  
0000118E                           252      ; Player Score Value
0000118E  103C 000B                253      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001192  323C 0901                254      MOVE.W  #$0901,     D1          ; Col 09, Row 01
00001196  4E4F                     255      TRAP    #15                     ; Trap (Perform action)
00001198  103C 0003                256      MOVE.B  #03,        D0          ; Display number at D1.L
0000119C  2239 00001530            257      MOVE.L  PLAYER_SCORE,D1         ; Move Score to D1.L
000011A2  4E4F                     258      TRAP    #15                     ; Trap (Perform action)
000011A4                           259      
000011A4                           260      ; Player X Message
000011A4  103C 000B                261      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011A8  323C 0202                262      MOVE.W  #$0202,     D1          ; Col 02, Row 02
000011AC  4E4F                     263      TRAP    #15                     ; Trap (Perform action)
000011AE  43F9 00001502            264      LEA     X_MSG,      A1          ; X Message
000011B4  303C 000D                265      MOVE    #13,        D0          ; No Line feed
000011B8  4E4F                     266      TRAP    #15                     ; Trap (Perform action)
000011BA                           267      
000011BA                           268      ; Player X
000011BA  103C 000B                269      MOVE.B  #TC_CURSR_P, D0          ; Set Cursor Position
000011BE  323C 0502                270      MOVE.W  #$0502,     D1          ; Col 05, Row 02
000011C2  4E4F                     271      TRAP    #15                     ; Trap (Perform action)
000011C4  103C 0003                272      MOVE.B  #03,        D0          ; Display number at D1.L
000011C8  2239 00001528            273      MOVE.L  PLAYER_X,   D1          ; Move X to D1.L
000011CE  4E4F                     274      TRAP    #15                     ; Trap (Perform action)
000011D0                           275      
000011D0                           276      ; Player Y Message
000011D0  103C 000B                277      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011D4  323C 1002                278      MOVE.W  #$1002,     D1          ; Col 10, Row 02
000011D8  4E4F                     279      TRAP    #15                     ; Trap (Perform action)
000011DA  43F9 00001505            280      LEA     Y_MSG,      A1          ; Y Message
000011E0  303C 000D                281      MOVE    #13,        D0          ; No Line feed
000011E4  4E4F                     282      TRAP    #15                     ; Trap (Perform action)
000011E6                           283      
000011E6                           284      ; Player Y
000011E6  103C 000B                285      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000011EA  323C 1202                286      MOVE.W  #$1202,     D1          ; Col 12, Row 02
000011EE  4E4F                     287      TRAP    #15                     ; Trap (Perform action)
000011F0  103C 0003                288      MOVE.B  #03,        D0          ; Display number at D1.L
000011F4  2239 0000152C            289      MOVE.L  PLAYER_Y,   D1          ; Move X to D1.L
000011FA  4E4F                     290      TRAP    #15                     ; Trap (Perform action) 
000011FC                           291  
000011FC                           292      ; Player Velocity Message
000011FC  103C 000B                293      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001200  323C 0203                294      MOVE.W  #$0203,     D1          ; Col 02, Row 03
00001204  4E4F                     295      TRAP    #15                     ; Trap (Perform action)
00001206  43F9 00001508            296      LEA     V_MSG,      A1          ; Velocity Message
0000120C  303C 000D                297      MOVE    #13,        D0          ; No Line feed
00001210  4E4F                     298      TRAP    #15                     ; Trap (Perform action)
00001212                           299      
00001212                           300      ; Player Velocity
00001212  103C 000B                301      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001216  323C 0503                302      MOVE.W  #$0503,     D1          ; Col 05, Row 03
0000121A  4E4F                     303      TRAP    #15                     ; Trap (Perform action)
0000121C  103C 0003                304      MOVE.B  #03,        D0          ; Display number at D1.L
00001220  2239 00001534            305      MOVE.L  PLYR_VELOCITY,D1        ; Move X to D1.L
00001226  4E4F                     306      TRAP    #15                     ; Trap (Perform action)
00001228                           307      
00001228                           308      ; Player Gravity Message
00001228  103C 000B                309      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000122C  323C 1003                310      MOVE.W  #$1003,     D1          ; Col 10, Row 03
00001230  4E4F                     311      TRAP    #15                     ; Trap (Perform action)
00001232  43F9 0000150B            312      LEA     G_MSG,      A1          ; G Message
00001238  303C 000D                313      MOVE    #13,        D0          ; No Line feed
0000123C  4E4F                     314      TRAP    #15                     ; Trap (Perform action)
0000123E                           315      
0000123E                           316      ; Player Gravity
0000123E  103C 000B                317      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001242  323C 1203                318      MOVE.W  #$1203,     D1          ; Col 12, Row 03
00001246  4E4F                     319      TRAP    #15                     ; Trap (Perform action)
00001248  103C 0003                320      MOVE.B  #03,        D0          ; Display number at D1.L
0000124C  2239 00001538            321      MOVE.L  PLYR_GRAVITY,D1         ; Move Gravity to D1.L
00001252  4E4F                     322      TRAP    #15                     ; Trap (Perform action)
00001254                           323  
00001254                           324      ; Player On Ground Message
00001254  103C 000B                325      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001258  323C 0204                326      MOVE.W  #$0204,     D1          ; Col 10, Row 03
0000125C  4E4F                     327      TRAP    #15                     ; Trap (Perform action)
0000125E  43F9 0000150E            328      LEA     GND_MSG,    A1          ; On Ground Message
00001264  303C 000D                329      MOVE    #13,        D0          ; No Line feed
00001268  4E4F                     330      TRAP    #15                     ; Trap (Perform action)
0000126A                           331      
0000126A                           332      ; Player On Ground
0000126A  103C 000B                333      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000126E  323C 0604                334      MOVE.W  #$0604,     D1          ; Col 06, Row 04
00001272  4E4F                     335      TRAP    #15                     ; Trap (Perform action)
00001274  103C 0003                336      MOVE.B  #03,        D0          ; Display number at D1.L
00001278  2239 0000153C            337      MOVE.L  PLYR_ON_GND,D1          ; Move Play on Ground ? to D1.L
0000127E  4E4F                     338      TRAP    #15                     ; Trap (Perform action)
00001280                           339  
00001280                           340      ; Show Keys Pressed
00001280  103C 000B                341      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
00001284  323C 2001                342      MOVE.W  #$2001,     D1          ; Col 20, Row 1
00001288  4E4F                     343      TRAP    #15                     ; Trap (Perform action)
0000128A  43F9 000014D1            344      LEA     KEYCODE_MSG, A1         ; Keycode
00001290  303C 000D                345      MOVE    #13,        D0          ; No Line feed
00001294  4E4F                     346      TRAP    #15                     ; Trap (Perform action)
00001296                           347  
00001296                           348      ; Show KeyCode
00001296  103C 000B                349      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
0000129A  323C 3001                350      MOVE.W  #$3001,     D1          ; Col 30, Row 1
0000129E  4E4F                     351      TRAP    #15                     ; Trap (Perform action)    
000012A0  2239 00001524            352      MOVE.L  CURRENT_KEY,D1          ; Move Key Pressed to D1
000012A6  103C 0003                353      MOVE.B  #03,        D0          ; Display the contents of D1
000012AA  4E4F                     354      TRAP    #15                     ; Trap (Perform action)
000012AC                           355  
000012AC                           356      ; Show if Update is Running
000012AC  103C 000B                357      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012B0  323C 0205                358      MOVE.W  #$0205,     D1          ; Col 02, Row 05
000012B4  4E4F                     359      TRAP    #15                     ; Trap (Perform action)
000012B6  43F9 000014EE            360      LEA     UPDATE_MSG, A1          ; Update
000012BC  303C 000D                361      MOVE    #13,        D0          ; No Line feed
000012C0  4E4F                     362      TRAP    #15                     ; Trap (Perform action)
000012C2                           363  
000012C2                           364      ; Show if Draw is Running
000012C2  103C 000B                365      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012C6  323C 0206                366      MOVE.W  #$0206,     D1          ; Col 02, Row 06
000012CA  4E4F                     367      TRAP    #15                     ; Trap (Perform action)
000012CC  43F9 000014F9            368      LEA     DRAW_MSG,   A1          ; Draw
000012D2  303C 000D                369      MOVE    #13,        D0          ; No Line feed
000012D6  4E4F                     370      TRAP    #15                     ; Trap (Perform action)
000012D8                           371  
000012D8                           372      ; Show if Idle is Running
000012D8  103C 000B                373      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000012DC  323C 0207                374      MOVE.W  #$0207,     D1          ; Col 02, Row 07
000012E0  4E4F                     375      TRAP    #15                     ; Trap (Perform action)
000012E2  43F9 000014E5            376      LEA     IDLE_MSG,   A1          ; Move Idle Message to A1
000012E8  303C 000D                377      MOVE    #13,        D0          ; No Line feed
000012EC  4E4F                     378      TRAP    #15                     ; Trap (Perform action)
000012EE                           379  
000012EE  4E75                     380      RTS  
000012F0                           381      
000012F0                           382  *-----------------------------------------------------------
000012F0                           383  * Subroutine    : Player is on Ground
000012F0                           384  * Description   : Check if the Player is on or off Ground
000012F0                           385  *-----------------------------------------------------------
000012F0                           386  IS_PLAYER_ON_GND:
000012F0                           387      ; Check if Player is on Ground
000012F0  4281                     388      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
000012F2  4282                     389      CLR.L   D2                      ; Clear contents of D2 (XOR is faster)
000012F4  3239 00001522            390      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
000012FA  82FC 0002                391      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
000012FE  2439 0000152C            392      MOVE.L  PLAYER_Y,   D2          ; Player Y Position
00001304  B441                     393      CMP     D1,         D2          ; Compare middle of Screen with Players Y Position 
00001306  6C00 0008                394      BGE     SET_ON_GROUND           ; The Player is on the Ground Plane
0000130A  6D00 002C                395      BLT     SET_OFF_GROUND          ; The Player is off the Ground
0000130E  4E75                     396      RTS                             ; Return to subroutine
00001310                           397  
00001310                           398  
00001310                           399  *-----------------------------------------------------------
00001310                           400  * Subroutine    : On Ground
00001310                           401  * Description   : Set the Player On Ground
00001310                           402  *-----------------------------------------------------------
00001310                           403  SET_ON_GROUND:
00001310  4281                     404      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001312  3239 00001522            405      MOVE.W  SCREEN_H,   D1          ; Place Screen width in D1
00001318  82FC 0002                406      DIVU    #02,        D1          ; divide by 2 for center on Y Axis
0000131C  23C1 0000152C            407      MOVE.L  D1,         PLAYER_Y    ; Reset the Player Y Position
00001322  4281                     408      CLR.L   D1                      ; Clear contents of D1 (XOR is faster)
00001324  7200                     409      MOVE.L  #00,        D1          ; Player Velocity
00001326  23C1 00001534            410      MOVE.L  D1,         PLYR_VELOCITY ; Set Player Velocity
0000132C  23FC 00000001 0000153C   411      MOVE.L  #GND_TRUE,  PLYR_ON_GND ; Player is on Ground
00001336  4E75                     412      RTS
00001338                           413  
00001338                           414  *-----------------------------------------------------------
00001338                           415  * Subroutine    : Off Ground
00001338                           416  * Description   : Set the Player Off Ground
00001338                           417  *-----------------------------------------------------------
00001338                           418  SET_OFF_GROUND:
00001338  23FC 00000000 0000153C   419      MOVE.L  #GND_FALSE, PLYR_ON_GND ; Player if off Ground
00001342  4E75                     420      RTS                             ; Return to subroutine
00001344                           421  *-----------------------------------------------------------
00001344                           422  * Subroutine    : Jump
00001344                           423  * Description   : Perform a Jump
00001344                           424  *-----------------------------------------------------------
00001344                           425  JUMP:
00001344  0CB9 00000001 0000153C   426      CMP.L   #GND_TRUE,PLYR_ON_GND   ; Player is on the Ground ?
0000134E  6700 0006                427      BEQ     PERFORM_JUMP            ; Do Jump
00001352  6000 0012                428      BRA     JUMP_DONE               ;
00001356                           429  PERFORM_JUMP:
00001356  6100 0046                430      BSR     PLAY_JUMP               ; Play jump sound
0000135A  23FC FFFFFFEC 00001534   431      MOVE.L  #PLYR_JUMP_V,PLYR_VELOCITY ; Set the players velocity to true
00001364  4E75                     432      RTS                             ; Return to subroutine
00001366                           433  JUMP_DONE:
00001366  4E75                     434      RTS                             ; Return to subroutine
00001368                           435  
00001368                           436  *-----------------------------------------------------------
00001368                           437  * Subroutine    : Idle
00001368                           438  * Description   : Perform a Idle
00001368                           439  *----------------------------------------------------------- 
00001368                           440  IDLE:
00001368  6100 0016                441      BSR     PLAY_RUN                ; Play Run Wav
0000136C  4E75                     442      RTS                             ; Return to subroutine
0000136E                           443  
0000136E                           444  *-----------------------------------------------------------
0000136E                           445  * Subroutines   : Sound Load and Play
0000136E                           446  * Description   : Initialise game sounds into memory 
0000136E                           447  * Current Sounds are RUN, JUMP and Opps for Collision
0000136E                           448  *-----------------------------------------------------------
0000136E                           449  RUN_LOAD:
0000136E  43F9 00001551            450      LEA     RUN_WAV,    A1          ; Load Wav File into A1
00001374  323C 0000                451      MOVE    #RUN_INDEX, D1          ; Assign it INDEX
00001378  303C 0047                452      MOVE    #71,        D0          ; Load into memory
0000137C  4E4F                     453      TRAP    #15                     ; Trap (Perform action)
0000137E  4E75                     454      RTS                             ; Return to subroutine
00001380                           455  
00001380                           456  PLAY_RUN:
00001380  323C 0000                457      MOVE    #RUN_INDEX, D1          ; Load Sound INDEX
00001384  303C 0048                458      MOVE    #72,        D0          ; Play Sound
00001388  4E4F                     459      TRAP    #15                     ; Trap (Perform action)
0000138A  4E75                     460      RTS                             ; Return to subroutine
0000138C                           461  
0000138C                           462  JUMP_LOAD:
0000138C  43F9 00001548            463      LEA     JUMP_WAV,   A1          ; Load Wav File into A1
00001392  323C 0001                464      MOVE    #JMP_INDEX, D1          ; Assign it INDEX
00001396  303C 0047                465      MOVE    #71,        D0          ; Load into memory
0000139A  4E4F                     466      TRAP    #15                     ; Trap (Perform action)
0000139C  4E75                     467      RTS                             ; Return to subroutine
0000139E                           468  
0000139E                           469  PLAY_JUMP:
0000139E  323C 0001                470      MOVE    #JMP_INDEX, D1          ; Load Sound INDEX
000013A2  303C 0048                471      MOVE    #72,        D0          ; Play Sound
000013A6  4E4F                     472      TRAP    #15                     ; Trap (Perform action)
000013A8  4E75                     473      RTS                             ; Return to subroutine
000013AA                           474  
000013AA                           475  OPPS_LOAD:
000013AA  43F9 00001559            476      LEA     OPPS_WAV,   A1          ; Load Wav File into A1
000013B0  323C 0002                477      MOVE    #OPPS_INDEX,D1          ; Assign it INDEX
000013B4  303C 0047                478      MOVE    #71,        D0          ; Load into memory
000013B8  4E4F                     479      TRAP    #15                     ; Trap (Perform action)
000013BA  4E75                     480      RTS                             ; Return to subroutine
000013BC                           481  
000013BC                           482  PLAY_OPPS:
000013BC  323C 0002                483      MOVE    #OPPS_INDEX,D1          ; Load Sound INDEX
000013C0  303C 0048                484      MOVE    #72,        D0          ; Play Sound
000013C4  4E4F                     485      TRAP    #15                     ; Trap (Perform action)
000013C6  4E75                     486      RTS                             ; Return to subroutine
000013C8                           487  
000013C8                           488  *-----------------------------------------------------------
000013C8                           489  * Subroutine    : Draw Player
000013C8                           490  * Description   : Draw Player Square
000013C8                           491  *-----------------------------------------------------------
000013C8                           492  DRAW_PLAYER:
000013C8                           493      ; Set Pixel Colors
000013C8  223C 00FFFFFF            494      MOVE.L  #WHITE,     D1          ; Set Background color
000013CE  103C 0050                495      MOVE.B  #80,        D0          ; Task for Background Color
000013D2  4E4F                     496      TRAP    #15                     ; Trap (Perform action)
000013D4                           497  
000013D4                           498      ; Set X, Y, Width and Height
000013D4  2239 00001528            499      MOVE.L  PLAYER_X,   D1          ; X
000013DA  2439 0000152C            500      MOVE.L  PLAYER_Y,   D2          ; Y
000013E0  2639 00001528            501      MOVE.L  PLAYER_X,   D3
000013E6  5083                     502      ADD.L   #PLYR_W_INIT,   D3      ; Width
000013E8  2839 0000152C            503      MOVE.L  PLAYER_Y,   D4 
000013EE  5084                     504      ADD.L   #PLYR_H_INIT,   D4      ; Height
000013F0                           505      
000013F0                           506      ; Draw Player
000013F0  103C 0057                507      MOVE.B  #87,        D0          ; Draw Player
000013F4  4E4F                     508      TRAP    #15                     ; Trap (Perform action)
000013F6  4E75                     509      RTS                             ; Return to subroutine
000013F8                           510  
000013F8                           511  *-----------------------------------------------------------
000013F8                           512  * Subroutine    : Draw Enemy
000013F8                           513  * Description   : Draw Enemy Square
000013F8                           514  *-----------------------------------------------------------
000013F8                           515  DRAW_ENEMY:
000013F8                           516      ; Set Pixel Colors
000013F8  223C 000000FF            517      MOVE.L  #RED,       D1          ; Set Background color
000013FE  103C 0050                518      MOVE.B  #80,        D0          ; Task for Background Color
00001402  4E4F                     519      TRAP    #15                     ; Trap (Perform action)
00001404                           520  
00001404                           521      ; Set X, Y, Width and Height
00001404  2239 00001540            522      MOVE.L  ENEMY_X,    D1          ; X
0000140A  2439 00001544            523      MOVE.L  ENEMY_Y,    D2          ; Y
00001410  2639 00001540            524      MOVE.L  ENEMY_X,    D3
00001416  5083                     525      ADD.L   #ENMY_W_INIT,   D3      ; Width
00001418  2839 00001544            526      MOVE.L  ENEMY_Y,    D4 
0000141E  5084                     527      ADD.L   #ENMY_H_INIT,   D4      ; Height
00001420                           528      
00001420                           529      ; Draw Enemy    
00001420  103C 0057                530      MOVE.B  #87,        D0          ; Draw Enemy
00001424  4E4F                     531      TRAP    #15                     ; Trap (Perform action)
00001426  4E75                     532      RTS                             ; Return to subroutine
00001428                           533  
00001428                           534  *-----------------------------------------------------------
00001428                           535  * Subroutine    : Collision Check
00001428                           536  * Description   : Axis-Aligned Bounding Box Collision Detection
00001428                           537  * Algorithm checks for overlap on the 4 sides of the Player and 
00001428                           538  * Enemy rectangles
00001428                           539  * PLAYER_X <= ENEMY_X + ENEMY_W &&
00001428                           540  * PLAYER_X + PLAYER_W >= ENEMY_X &&
00001428                           541  * PLAYER_Y <= ENEMY_Y + ENEMY_H &&
00001428                           542  * PLAYER_H + PLAYER_Y >= ENEMY_Y
00001428                           543  *-----------------------------------------------------------
00001428                           544  CHECK_COLLISIONS:
00001428  4281                     545      CLR.L   D1                      ; Clear D1
0000142A  4282                     546      CLR.L   D2                      ; Clear D2
0000142C                           547  PLAYER_X_LTE_TO_ENEMY_X_PLUS_W:
0000142C  2239 00001528            548      MOVE.L  PLAYER_X,   D1          ; Move Player X to D1
00001432  2439 00001540            549      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
00001438  D4B8 0008                550      ADD.L   ENMY_W_INIT,D2          ; Set Enemy width X + Width
0000143C  B481                     551      CMP.L   D1,         D2          ; Do the Overlap ?
0000143E  6F00 0006                552      BLE     PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  ; Less than or Equal ?
00001442  6000 0044                553      BRA     COLLISION_CHECK_DONE    ; If not no collision
00001446                           554  PLAYER_X_PLUS_W_LTE_TO_ENEMY_X:     ; Check player is not  
00001446  D2B8 0008                555      ADD.L   PLYR_W_INIT,D1          ; Move Player Width to D1
0000144A  2439 00001540            556      MOVE.L  ENEMY_X,    D2          ; Move Enemy X to D2
00001450  B481                     557      CMP.L   D1,         D2          ; Do they OverLap ?
00001452  6C00 0006                558      BGE     PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  ; Less than or Equal
00001456  6000 0030                559      BRA     COLLISION_CHECK_DONE    ; If not no collision   
0000145A                           560  PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H:     
0000145A  2239 0000152C            561      MOVE.L  PLAYER_Y,   D1          ; Move Player Y to D1
00001460  2439 00001544            562      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Y to D2
00001466  D4B8 0008                563      ADD.L   ENMY_H_INIT,D2          ; Set Enemy Height to D2
0000146A  B481                     564      CMP.L   D1,         D2          ; Do they Overlap ?
0000146C  6F00 0006                565      BLE     PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  ; Less than or Equal
00001470  6000 0016                566      BRA     COLLISION_CHECK_DONE    ; If not no collision 
00001474                           567  PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y:     ; Less than or Equal ?
00001474  D2B8 0008                568      ADD.L   PLYR_H_INIT,D1          ; Add Player Height to D1
00001478  2439 00001544            569      MOVE.L  ENEMY_Y,    D2          ; Move Enemy Height to D2  
0000147E  B481                     570      CMP.L   D1,         D2          ; Do they OverLap ?
00001480  6C00 0016                571      BGE     COLLISION               ; Collision !
00001484  6000 0002                572      BRA     COLLISION_CHECK_DONE    ; If not no collision
00001488                           573  COLLISION_CHECK_DONE:               ; No Collision Update points
00001488  5281                     574      ADD.L   #POINTS,    D1          ; Move points upgrade to D1
0000148A  D2B9 00001530            575      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
00001490  23C1 00001530            576      MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
00001496  4E75                     577      RTS                             ; Return to subroutine
00001498                           578  
00001498                           579  COLLISION:
00001498  6100 FF22                580      BSR     PLAY_OPPS               ; Play Opps Wav
0000149C  23FC 00000000 00001530   581      MOVE.L  #00, PLAYER_SCORE       ; Reset Player Score
000014A6  4E75                     582      RTS                             ; Return to subroutine
000014A8                           583  
000014A8                           584  *-----------------------------------------------------------
000014A8                           585  * Subroutine    : EXIT
000014A8                           586  * Description   : Exit message and End Game
000014A8                           587  *-----------------------------------------------------------
000014A8                           588  EXIT:
000014A8                           589      ; Show if Exiting is Running
000014A8  103C 000B                590      MOVE.B  #TC_CURSR_P,D0          ; Set Cursor Position
000014AC  323C 4004                591      MOVE.W  #$4004,     D1          ; Col 40, Row 1
000014B0  4E4F                     592      TRAP    #15                     ; Trap (Perform action)
000014B2  43F9 00001513            593      LEA     EXIT_MSG,   A1          ; Exit
000014B8  303C 000D                594      MOVE    #13,        D0          ; No Line feed
000014BC  4E4F                     595      TRAP    #15                     ; Trap (Perform action)
000014BE  103C 0009                596      MOVE.B  #TC_EXIT,   D0          ; Exit Code
000014C2  4E4F                     597      TRAP    #15                     ; Trap (Perform action)
000014C4  FFFF FFFF                598      SIMHALT
000014C8                           599  
000014C8                           600  *-----------------------------------------------------------
000014C8                           601  * Section       : Messages
000014C8                           602  * Description   : Messages to Print on Console, names should be
000014C8                           603  * self documenting
000014C8                           604  *-----------------------------------------------------------
000014C8= 53 63 6F 72 65 20 ...    605  SCORE_MSG       DC.B    'Score : ', 0       ; Score Message
000014D1= 4B 65 79 43 6F 64 ...    606  KEYCODE_MSG     DC.B    'KeyCode : ', 0     ; Keycode Message
000014DC= 4A 75 6D 70 2E 2E ...    607  JUMP_MSG        DC.B    'Jump....', 0       ; Jump Message
000014E5                           608  
000014E5= 49 64 6C 65 2E 2E ...    609  IDLE_MSG        DC.B    'Idle....', 0       ; Idle Message
000014EE= 55 70 64 61 74 65 ...    610  UPDATE_MSG      DC.B    'Update....', 0     ; Update Message
000014F9= 44 72 61 77 2E 2E ...    611  DRAW_MSG        DC.B    'Draw....', 0       ; Draw Message
00001502                           612  
00001502= 58 3A 00                 613  X_MSG           DC.B    'X:', 0             ; X Position Message
00001505= 59 3A 00                 614  Y_MSG           DC.B    'Y:', 0             ; Y Position Message
00001508= 56 3A 00                 615  V_MSG           DC.B    'V:', 0             ; Velocity Position Message
0000150B= 47 3A 00                 616  G_MSG           DC.B    'G:', 0             ; Gravity Position Message
0000150E= 47 4E 44 3A 00           617  GND_MSG         DC.B    'GND:', 0           ; On Ground Position Message
00001513                           618  
00001513= 45 78 69 74 69 6E ...    619  EXIT_MSG        DC.B    'Exiting....', 0    ; Exit Message
0000151F                           620  
0000151F                           621  *-----------------------------------------------------------
0000151F                           622  * Section       : Graphic Colors
0000151F                           623  * Description   : Screen Pixel Color
0000151F                           624  *-----------------------------------------------------------
0000151F  =00FFFFFF                625  WHITE           EQU     $00FFFFFF
0000151F  =000000FF                626  RED             EQU     $000000FF
0000151F                           627  
0000151F                           628  *-----------------------------------------------------------
0000151F                           629  * Section       : Screen Size
0000151F                           630  * Description   : Screen Width and Height
0000151F                           631  *-----------------------------------------------------------
00001520                           632  SCREEN_W        DS.W    01  ; Reserve Space for Screen Width
00001522                           633  SCREEN_H        DS.W    01  ; Reserve Space for Screen Height
00001524                           634  
00001524                           635  *-----------------------------------------------------------
00001524                           636  * Section       : Keyboard Input
00001524                           637  * Description   : Used for storing Keypresses
00001524                           638  *-----------------------------------------------------------
00001524                           639  CURRENT_KEY     DS.L    01  ; Reserve Space for Current Key Pressed
00001528                           640  
00001528                           641  *-----------------------------------------------------------
00001528                           642  * Section       : Character Positions
00001528                           643  * Description   : Player and Enemy Position Memory Locations
00001528                           644  *-----------------------------------------------------------
00001528                           645  PLAYER_X        DS.L    01  ; Reserve Space for Player X Position
0000152C                           646  PLAYER_Y        DS.L    01  ; Reserve Space for Player Y Position
00001530                           647  PLAYER_SCORE    DS.L    01  ; Reserve Space for Player Score
00001534                           648  
00001534                           649  PLYR_VELOCITY   DS.L    01  ; Reserve Space for Player Velocity
00001538                           650  PLYR_GRAVITY    DS.L    01  ; Reserve Space for Player Gravity
0000153C                           651  PLYR_ON_GND     DS.L    01  ; Reserve Space for Player on Ground
00001540                           652  
00001540                           653  ENEMY_X         DS.L    01  ; Reserve Space for Enemy X Position
00001544                           654  ENEMY_Y         DS.L    01  ; Reserve Space for Enemy Y Position
00001548                           655  
00001548                           656  *-----------------------------------------------------------
00001548                           657  * Section       : Sounds
00001548                           658  * Description   : Sound files, which are then loaded and given
00001548                           659  * an address in memory, they take a longtime to process and play
00001548                           660  * so keep the files small. Used https://voicemaker.in/ to 
00001548                           661  * generate and Audacity to convert MP3 to WAV
00001548                           662  *-----------------------------------------------------------
00001548= 6A 75 6D 70 2E 77 ...    663  JUMP_WAV        DC.B    'jump.wav',0        ; Jump Sound
00001551= 72 75 6E 2E 77 61 ...    664  RUN_WAV         DC.B    'run.wav',0         ; Run Sound
00001559= 6F 70 70 73 2E 77 ...    665  OPPS_WAV        DC.B    'opps.wav',0        ; Collision Opps
00001562                           666  
00001562                           667      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
CHECK_COLLISIONS    1428
COLLISION           1498
COLLISION_CHECK_DONE  1488
CURRENT_KEY         1524
DRAW                1158
DRAW_ENEMY          13F8
DRAW_MSG            14F9
DRAW_PLAYER         13C8
DRAW_PLYR_DATA      1176
ENEMY_X             1540
ENEMY_Y             1544
ENMY_H_INIT         8
ENMY_W_INIT         8
ESCAPE              1B
EXIT                14A8
EXIT_MSG            1513
GAME                10A4
GAMELOOP            10A8
GND_FALSE           0
GND_MSG             150E
GND_TRUE            1
G_MSG               150B
IDLE                1368
IDLE_MSG            14E5
INITIALISE          1000
INPUT               10BE
IS_PLAYER_ON_GND    12F0
JMP_INDEX           1
JUMP                1344
JUMP_DONE           1366
JUMP_LOAD           138C
JUMP_MSG            14DC
JUMP_WAV            1548
KEYCODE_MSG         14D1
MOVE_ENEMY          1140
OPPS_INDEX          2
OPPS_LOAD           13AA
OPPS_WAV            1559
PERFORM_JUMP        1356
PLAYER_SCORE        1530
PLAYER_X            1528
PLAYER_X_LTE_TO_ENEMY_X_PLUS_W  142C
PLAYER_X_PLUS_W_LTE_TO_ENEMY_X  1446
PLAYER_Y            152C
PLAYER_Y_LTE_TO_ENEMY_Y_PLUS_H  145A
PLAYER_Y_PLUS_H_LTE_TO_ENEMY_Y  1474
PLAY_JUMP           139E
PLAY_OPPS           13BC
PLAY_RUN            1380
PLYR_DFLT_G         1
PLYR_DFLT_V         0
PLYR_GRAVITY        1538
PLYR_H_INIT         8
PLYR_JUMP_V         FFFFFFEC
PLYR_ON_GND         153C
PLYR_VELOCITY       1534
PLYR_W_INIT         8
POINTS              1
PROCESS_INPUT       10DC
RED                 FF
RESET_ENEMY_POSITION  1148
RUN_INDEX           0
RUN_LOAD            136E
RUN_WAV             1551
SCORE_MSG           14C8
SCREEN_H            1522
SCREEN_W            1520
SET_OFF_GROUND      1338
SET_ON_GROUND       1310
SPACEBAR            20
START               1000
TC_CURSR_P          B
TC_DBL_BUF          5C
TC_EXIT             9
TC_KEYCODE          13
TC_SCREEN           21
TC_S_SIZE           0
UPDATE              1104
UPDATE_MSG          14EE
V_MSG               1508
WHITE               FFFFFF
X_MSG               1502
Y_MSG               1505
